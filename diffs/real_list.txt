* creating list, push front/back *
* normal and reverse iteration *
69 2 1 4 
4 1 2 69 

* front() and back() *
front : 69, back : 4

* assigning from array *
size = 5
{9, 7, 5, 3, 1}

* pop front/back *
size = 2
{7, 5}

* insertions *
size = 9
{0, 9, 9, 9, 7, 7, 5, 5, 42}

* erasing last element *
size = 8
{0, 9, 9, 9, 7, 7, 5, 5}

* erasing elements [1, 5[ *
size = 5
{0, 7, 7, 5, 5}

* assignment operator '=' *  -->  success
* copy constructor *  -->  success
* swap (both member and non-member) *  -->  success, success

* resizing {9, 7, 5, 3, 1} to 8, filling with 77 *
size = 8
{9, 7, 5, 3, 1, 77, 77, 77}
* resizing to 3 *
size = 3
{9, 7, 5}

* size(), clear() and empty() *  -->  success, success, success
size = 0
{}

* max_size() *
max_size = 768614336404564650

* initializing bob and joe *
size = 3
{1, 7, 9}
size = 3
{2, 8, 10}

* splicing entire list : bob.splice(bob.begin() + 2, joe) *
size = 6
{1, 7, 2, 8, 10, 9}
size = 0
{}

* splicing single elem : bob.splice(bob.begin() + 2, joe, --joe.end()) *
size = 4
{1, 7, 10, 9}
size = 2
{2, 8}

* splicing range : bob.splice(bob.begin() + 2, joe, ++joe.begin(), --joe.end()) *
size = 4
{1, 7, 8, 9}
size = 2
{2, 10}

* remove(), remove_if() *
removing 4's : {4, 8, 5, 4, 8, 6, 10, 3, 4}  -->  {8, 5, 8, 6, 10, 3}
removing even numbers : {4, 8, 5, 4, 8, 6, 10, 3, 4}  -->  {5, 3}

* sort() *
sort : {4, 8, 5, 4, 8, 6, 10, 3, 4}  -->  {3, 4, 4, 4, 5, 6, 8, 8, 10}
sort(sort_descend) : {4, 8, 5, 4, 8, 6, 10, 3, 4}  -->  {10, 8, 8, 6, 5, 4, 4, 4, 3}

* merge() *
A : {3, 4, 4, 4, 5, 6, 8, 8, 10}
B : {2, 7, 10, 12, 18}
A  -->  {2, 3, 4, 4, 4, 5, 6, 7, 8, 8, 10, 10, 12, 18}
B  -->  {}

* merge() with comparison function *
A : {10, 8, 8, 6, 5, 4, 4, 4, 3}
B : {18, 12, 10, 7, 2}
A  -->  {18, 12, 10, 10, 8, 8, 7, 6, 5, 4, 4, 4, 3, 2}
B  -->  {}

* unique() *
{18, 12, 10, 10, 8, 8, 7, 6, 5, 4, 4, 4, 3, 2}  ->  {18, 12, 10, 8, 7, 6, 5, 4, 3, 2}

* unique(predicate) *
{9, 5, 3, 45, 15, 23, 22, 87, 90}  ->  {9, 3}

* reverse() *
{18, 12, 10, 10, 8, 8, 7, 6, 5, 4, 4, 4, 3, 2}  ->  {2, 3, 4, 4, 4, 5, 6, 7, 8, 8, 10, 10, 12, 18}

* iterators and constness *
-> success
-> success
-> success
-> success

* comparison operator overloads *
{yo, ca, va}
{oui, et, toi}
{le, bon, steak}
{le, cpp, c cool}
== --> success
!= --> success
>  --> success
>= --> success
<  --> success
<= --> success

